import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android' version '1.9.20'
    id "org.hidetake.ssh" version "2.11.2"
}

android {
    namespace 'com.tungsten.fcl'
    compileSdk 34


    Properties properties = new Properties()
    properties.load(Files.newInputStream(Paths.get("${rootDir}/local.properties")))

    signingConfigs {
        DebugKey {
            storeFile file("../debug-key.jks")
            storePassword "FCL-Debug"
            keyAlias "FCL-Debug"
            keyPassword "FCL-Debug"
        }
    }

    defaultConfig {
        aaptOptions{
            ignoreAssets "!.svn:!.git:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*.scc:*~"
            ignoreAssetsPattern "!.svn:!.git:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*.scc:*~"
        }
        applicationId "com.tungsten.fcl.debug"
        minSdk 26
        targetSdk 34
        versionCode 1182
        versionName "1.1.8.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            initWith debug
            signingConfig signingConfigs.DebugKey
            jniDebuggable true
            renderscriptDebuggable true
            debuggable true
            minifyEnabled false
            multiDexEnabled true
        }
        configureEach {
            resValue "string", "app_version", "${defaultConfig.versionName}"
            resValue "string", "curse_api_key", properties.get("curse-api-key","null")
            resValue "string", "oauth_api_key", properties.get("oauth-api-key","null")
        }
    }
    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def abi = output.getFilter(ABI)
            if (abi == null) {
                abi = "all"
            }
            variant.mergeAssetsProvider.get().doLast {
                def arch = System.getProperty("arch", "all")
                def assetsDir = mergeAssetsProvider.get().outputDir.get()
                def java = ['jre8', 'jre11', 'jre17', 'jre21']
                println(arch)
                java.forEach { String str ->
                    def runtimeDir = new File([assetsDir, "app_runtime/java/" + str].join(File.separator))
                    println(runtimeDir)
                    def files = fileTree(dir: runtimeDir, include: ['*.tar.xz'])
                    files.forEach { File file ->
                        if (arch != 'all' && !file.getName().contains(arch) && !file.getName().contains("universal")) {
                            print("delete:${file} :")
                            println(delete(file))
                        }
                    }
                }
            }
            outputFileName = "FCL-${variant.buildType.name}-${defaultConfig.versionName}-${abi}.apk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
        pickFirst '**/libbytehook.so'
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    dataBinding {
        enabled true
    }
    buildFeatures {
        buildConfig true
    }
    splits {
        def arch = System.getProperty("arch", "all")
        if (arch != 'all') {
            abi {
                enable true
                reset()
                switch (arch) {
                    case 'arm':
                        include 'armeabi-v7a'
                        break
                    case 'arm64':
                        include 'arm64-v8a'
                        break
                    case 'x86':
                        include 'x86'
                        break
                    case 'x86_64':
                        include 'x86_64'
                        break
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':FCLCore')
    implementation project(path: ':FCLLibrary')
    implementation project(path: ':FCLauncher')
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.14.0'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    implementation 'org.apache.commons:commons-compress:1.25.0'
    implementation 'org.tukaani:xz:1.9'
    implementation 'com.github.steveice10:opennbt:1.5'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.github.Mathias-Boulay:android_gamepad_remapper:2.0.3'
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.jaredrummler:android-device-names:2.1.0'
}
